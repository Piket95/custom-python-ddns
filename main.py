from flask import Flask, request, render_template

import json
import os

app = Flask(__name__)

@app.errorhandler(403)
def page_not_found(e):
    return render_template('403.html'), 403

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(405)
def method_not_allowed(e):
    return render_template('404.html'), 404

@app.route('/update')
def update():
    user = request.args.get('user', '')
    password_hash = request.args.get('password', '')
    host = request.args.get('host', '')
    ip = request.args.get('ip', '')

    # PrÃ¼fen, ob User existiert und Passwort-Hash stimmt
    check_result = check_user(user, password_hash)
    if check_result is True:
        # Host und IP aktualisieren
        if update_user_data(user, password_hash, host, ip):
            write_dnsmasq_config()  # dnsmasq-Konfiguration aktualisieren
            return "Zugriff erlaubt, Daten aktualisiert", 200
        else:
            return "Interner Fehler", 500
    elif check_result is None:
        # User existiert nicht -> anlegen
        if add_user(user, password_hash, host, ip):
            return "Neuer User angelegt", 201
        else:
            return "Interner Fehler", 500
    else:
        return "Zugriff verweigert (falsches Passwort)", 403


def read_users():
    if not os.path.exists('data/users.json'):
        return {"users": []}
    with open('data/users.json', 'r') as f:
        return json.load(f)

def write_users(data):
    with open('data/users.json', 'w') as f:
        json.dump(data, f, indent=4)

def check_user(user, password_hash):
    users = read_users()
    for u in users['users']:
        if u['user'] == user:
            return u['password_hash'] == password_hash  # True, wenn Passwort-Hash stimmt
    return None  # User existiert nicht

def add_user(user, password_hash, host, ip):
    users = read_users()
    for u in users['users']:
        if u['user'] == user:
            return False  # User existiert bereits
    users['users'].append({
        "user": user,
        "password_hash": password_hash,
        "host": host,
        "ip": ip
    })
    write_users(users)
    return True

def update_user_data(user, password_hash, host, ip):
    users = read_users()
    for u in users['users']:
        if u['user'] == user and u['password_hash'] == password_hash:
            # Passwort stimmt, also host und ip aktualisieren
            u['host'] = host
            u['ip'] = ip
            write_users(users)
            return True
    return False

def write_dnsmasq_config():
    users = json.load(open('data/users.json', 'r')) if os.path.exists('data/users.json') else {"users": []}
    config_lines = [
        "# This file was generated by the Custom Python DynDns Script.",
        "# DO NOT EDIT THIS FILE MANUALLY!",
        ""
    ]
    for user in users['users']:
        config_lines.append(f"address=/{user['host']}/{user['ip']}")
    # with open('/etc/dnsmasq.d/dyndns.conf', 'w') as f:
    #     f.write("\n".join(config_lines) + "\n")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
